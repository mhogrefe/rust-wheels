use sha3::{Digest, Sha3_256};

pub const SEED_SIZE: usize = 256;

pub const EXAMPLE_SEED: [u32; SEED_SIZE] = [
    0xc2ba_7ec5,
    0x8570_291c,
    0xc019_03b4,
    0xb3b6_3b5e,
    0x60a1_5a04,
    0x49cb_3889,
    0x8656_014b,
    0x4489_160e,
    0x4cfc_5c82,
    0x4b50_a3c8,
    0x842d_828e,
    0x9b2d_83d5,
    0x8f70_0df6,
    0x0618_2781,
    0x7d9f_61f9,
    0x0af2_0cd5,
    0x94d7_7191,
    0xc3d9_3b66,
    0x19f8_b8f6,
    0xba2e_efdb,
    0x678a_d2b8,
    0x3b53_214d,
    0x8058_837a,
    0x3e89_9556,
    0x2f03_9c85,
    0x7b0e_4c96,
    0xd4e1_848a,
    0x278f_f71b,
    0x19f0_7329,
    0x11c6_dd13,
    0xaf62_556f,
    0x997b_71b0,
    0x53a8_0a7d,
    0x3c62_630b,
    0x98e2_5284,
    0x855e_8f46,
    0xc051_e439,
    0xabee_d5b1,
    0x6ef2_8ce9,
    0xc556_5c11,
    0x092e_2a2b,
    0x9067_a520,
    0x9e70_aef7,
    0x943e_7656,
    0x18c4_d180,
    0x507f_1efc,
    0x4cae_8182,
    0x8bb2_d120,
    0x008b_968e,
    0xd6e9_fbd9,
    0x537a_5896,
    0x7d8a_a351,
    0xdb1a_211e,
    0xcdfb_287a,
    0x70c8_7163,
    0x1f1b_5cf4,
    0x75d0_a44e,
    0x6761_9075,
    0x2274_3ffc,
    0xed61_527e,
    0xbaa1_09b9,
    0xf608_9407,
    0xfb30_b32b,
    0xe0c1_5709,
    0x4a34_890a,
    0x7b4f_04e4,
    0x0144_f2e6,
    0x217e_07b4,
    0x0caf_93eb,
    0xe698_376f,
    0xa146_167e,
    0xf434_5d67,
    0x224d_c81c,
    0x2fad_fdee,
    0xfea4_a8ec,
    0x7629_3549,
    0x82f8_713a,
    0x3afc_fe7d,
    0xfd9b_3b8b,
    0x0329_303d,
    0x8c85_be02,
    0xb65e_899a,
    0xa166_256b,
    0x5146_cf71,
    0xfc07_6118,
    0xddde_d979,
    0xb16a_0d0e,
    0x4b37_a80e,
    0xfc3d_5e1f,
    0x44f2_cebd,
    0xaf18_b58d,
    0xaa19_a03d,
    0x55ba_dec6,
    0xefaa_7e5f,
    0xa2a0_7a27,
    0x3297_2064,
    0x309a_cda5,
    0x26ef_3b9a,
    0xe280_fa00,
    0x0475_bb12,
    0x5af7_a531,
    0xece9_bed3,
    0x802b_1c7b,
    0x69f6_d54b,
    0xc450_2e07,
    0xbdf7_e9c7,
    0x0a1b_d4ca,
    0x01e8_163d,
    0xd78c_8cdf,
    0x23e4_c122,
    0x802f_6a97,
    0x2364_b37e,
    0xcede_fe5f,
    0x0cc1_8f37,
    0x4b24_c75d,
    0x9d75_f0ed,
    0xd519_acd2,
    0x8dda_baca,
    0xac7a_26ab,
    0xf2f9_d5f0,
    0xcd9e_65d7,
    0xaf56_730a,
    0xaf0f_51e2,
    0x2b80_a753,
    0xc5e7_09ff,
    0x7455_8483,
    0xff14_13f3,
    0xe8ac_0312,
    0x7caf_6683,
    0x0806_dbdf,
    0xb914_a79c,
    0x3c22_f9ca,
    0x559a_5450,
    0x0d44_af11,
    0x6917_e268,
    0xc464_800c,
    0x8dbf_36a3,
    0xe783_a8e0,
    0x5d2e_69ec,
    0x7e60_6281,
    0x7cbc_e3d7,
    0xf8df_4062,
    0x6385_2a67,
    0xdd71_2417,
    0x33f4_3ef5,
    0x0466_8ce5,
    0x3aaf_f9fe,
    0xa1a0_15a4,
    0x2036_353f,
    0xb62e_3085,
    0x02c3_7c33,
    0x918a_0e96,
    0xdcff_c070,
    0x44f6_52f8,
    0xf23b_9e9e,
    0xfe9f_2bd7,
    0x3558_57f6,
    0x735e_0efc,
    0x46e2_9345,
    0xea77_a3ff,
    0x40cb_cad9,
    0xbd2e_5013,
    0x7ab2_c23b,
    0xfd57_b407,
    0xc155_3de4,
    0xfdf9_5c8b,
    0xfbb0_0eb7,
    0x3a1e_33e6,
    0x6ab7_973e,
    0xe758_5473,
    0xb16c_cab0,
    0x20ef_a765,
    0x6047_28a7,
    0x7de0_b479,
    0xf708_d51c,
    0x480d_51d1,
    0xc543_88e6,
    0x78c0_c2a8,
    0xb7f2_f73e,
    0xc184_d42f,
    0x43c9_c988,
    0x81d5_c1e3,
    0xeb3f_8337,
    0x5d8b_fb01,
    0x101a_0a28,
    0xa9db_2a65,
    0x2b19_8777,
    0x36b3_2652,
    0x4c23_e850,
    0x356b_0620,
    0x8a9c_7afb,
    0x9e5c_04bb,
    0x2ba8_5921,
    0xf4a4_931d,
    0x5006_9920,
    0xd454_8176,
    0x9deb_2296,
    0xfacb_9fce,
    0x809b_0c63,
    0x0f83_e2b5,
    0xa552_296b,
    0xebfd_e28b,
    0xb091_d265,
    0xe5ee_b245,
    0xa821_18f5,
    0xe1a7_324e,
    0x405d_f7df,
    0x61ed_1072,
    0x31c2_fd1e,
    0xfc51_2b29,
    0xf414_7274,
    0x4d69_b85a,
    0x70fe_ddb5,
    0xb847_511f,
    0xc06d_bb14,
    0x8b49_c1bf,
    0x7f8b_87ac,
    0x2626_3842,
    0x187a_71d6,
    0x7a51_8b43,
    0x1778_0e8a,
    0x60ba_19c1,
    0x32a1_636f,
    0x87e6_a806,
    0x8238_efe3,
    0x6cf2_aa46,
    0xf04a_b8e4,
    0x7b08_7b4e,
    0x54f9_8594,
    0x46e2_cb12,
    0x374a_7391,
    0x6f11_8b9d,
    0xc278_14ff,
    0xb254_8865,
    0x0029_b619,
    0x81c2_44c3,
    0x4916_def1,
    0x53b1_fc20,
    0x41a1_9f4f,
    0x025e_b0c3,
    0x9efa_239a,
    0x89c0_7eed,
    0xeb99_a870,
    0x931f_129f,
    0x075f_60e4,
    0x951d_b99f,
    0xcb52_a1e1,
    0x5426_00f0,
    0xeb82_b9a3,
    0x5e4f_d956,
    0xe7f7_1bab,
    0x8f79_aeff,
    0xab5b_81ae,
    0x7aa7_14f0,
    0x8a82_60b7,
    0x123f_c3c9,
];

pub fn scramble(seed: &[u32], s: &str) -> [u32; SEED_SIZE] {
    let mut hasher = Sha3_256::new();
    hasher.input(s.as_bytes());
    let hash = hasher.result();
    let mut scrambled_seed = [0; SEED_SIZE];
    for i in 0..SEED_SIZE {
        let j = (i & 0x7) << 2;
        let byte_1 = u32::from(hash[j]);
        let byte_2 = u32::from(hash[j + 1]);
        let byte_3 = u32::from(hash[j + 2]);
        let byte_4 = u32::from(hash[j + 3]);
        scrambled_seed[i] = seed[i] ^ (byte_1 << 24 | byte_2 << 16 | byte_3 << 8 | byte_4)
    }
    scrambled_seed
}
